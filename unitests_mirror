import unittest
import main_app
import math
 
class CalcTest(unittest.TestCase):
    def test_cross(self):
        self.assertEqual(main_app.cross(1,1,1,5,5,1,5,5), False)
        self.assertEqual(main_app.cross(0,2,2,4,1,1,5,3), False)
        self.assertEqual(main_app.cross(3,2,4,6,6,2,7,0), False)
        self.assertEqual(main_app.cross(1,1,5,5,5,1,1,5), True)
        self.assertEqual(main_app.cross(1,10,2,7,0,8,4,9), True)
        self.assertEqual(main_app.cross(2,3,7,9,3,6,7,1), True)
        
    def test_find_point(self):
        self.assertEqual(main_app.find_point(1,1,5,5,1,5,5,1), [3,3,2*math.sqrt(2)])
        self.assertEqual(main_app.find_point(2,1,8,1,3,2,5,0), [4,1,2])
        self.assertEqual(main_app.find_point(7,6,7,3,6,5,10,5), [7,5,1])
        
    def test_find_mir(self):
        self.assertEqual(main_app.find_mir(2,3,2.5,2.5,2,2,4,4), [2,3])
        self.assertEqual(main_app.find_mir(3,4,4,4,0,0,6,6), [4,5])
        self.assertEqual(main_app.find_mir(5,1,6,0,6,-1,6,5), [5,-1])

    def test_number_of_walls(self):
        self.assertEqual((main_app.ourRoom.Number_of_walls>2) and (main_app.ourRoom.Number_of_walls<11), True)
        
    def test_positions_and_directions(self):
        self.assertEqual ((((main_app.ourLaser.Position_x) != (main_app.ourLaser.Direction_x)) or ((main_app.ourLaser.Position_y) != (main_app.ourLaser.Direction_y))),True)
        
if __name__ == '__main__':
    unittest.main()
